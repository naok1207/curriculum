■ 開発
    ウォーターフォール開発: 開発手順を1つずつ確認しながら工程を進めて行く手法 開発を各工程に分て進める
        メリット: 計画を立てやすい 進捗管理のしやすさ・成果物ベースでの開発
        デメリット: 上流工程でしか要求定義ができない 仕様変更時の影響(テストのやり直しなどが発生) 成果物管理の稼働負荷
        工程: 要求定義・基本設計・詳細設計・実装・単体テスト・結合テスト・総合テスト・運用テスト・リリース・運用保守
        要求定義: 開発するシステム全体の機能をユーザとの打ち合わせを重ねて具体化し、開発するシステムの機能、目的、対象範囲を決定
        基本設計: 技術の選定やハードウェアの選定など様々な基礎設計を行う
        詳細設計: 基本設計において不完全なものを詳細設計フェーズで修正を行い、使用を確定させる
        実装: 詳細設計書を元にプログラムのコーディングを行う 単体テストと同時に行うケースが多い
        単体テスト: 単体テスト仕様書を元にテストを行う。
        結合テスト: プログラム同士の連携が正しく行われているかを確認する
        総合テスト: 実際の環境と同等の環境において行うテスト
        運用テスト：実際にユーザに使用してもらい、要求機能を満たしているか、捜査官はどうかなどを確認してもらうフェーズ
        リリース: システムを本番環境にリリースを行う
        運用・保守: システムの運用を行うフェーズ システムの不具合を修正したり新たな昨日の追加開発などを行う
    アジャイル開発: アジャイル=素早い,機敏 開発期間がスピーディー 開発を小さな単位に分け、「計画する」「設計、実装、テストを行う」、「機能のリリースをする」をインテレーション(反復) と呼ばれるサイクルで進める開発手法
        スクラム: チームワークを重視 チームメンバー自ら計画を立て、インテレーションごとに開発の進行や製品に問題ないか、正しく動いているかどうかを精査する。
        エクストリーム・プログラミング(XP): Extreme Programming 予め立てた計画をどんなことがあっても曲げずに遂行することよりも、途中で状況に応じて変更する柔軟さの方を重視する手法
        ユーザー機能駆動開発(FFD): Feature Driven Development 実際に動いているソフトウェアであっても、適切な間隔で開発を繰り返す手法 ユーザに取手の機能価値を重視して開発されているのが特徴
    マイグレーション: migration プログラムやデータ、OSなどの環境やプラットフォームを以降、変換すること。
    デグレーション: degradatin 以前の状態の方がよかった場合などに機能を元に戻すこと
    デプロイ: 幅広い意味で用いられる 開発環境からステージング環境へシステムを反映させることも、ステージング環境から本番環境へ反映させることも、「デプロイ」すると表現できる
    コンフリクト: 複数の装置やプログラムが同じ資源（ファイルやデータ）を利用しようとして競合状態を意味する。
    環境
        開発環境（ローカル）: システムを開発するために必要な機材やソフトウェアなどを組み合わせ構成された、開発者の作業環境
        検証環境（ステージング）: 本番環境に条件を限りなく近づけ、最終テストに用いる擬似本番環境
        本番環境: 開発されたシステム（製品を）実際に稼働させて利用するための施設や機材、ソフトウェアなどを組み合わせた運用環境のこと
    設計書／仕様書 ウォーターフォール開発に同じ
        要件定義:
        基本設計書
        詳細設計書
    テスト ウォーターフォール開発に同じ
        単体テスト（UT）
        結合テスト（CT／IT）
        総合テスト（ST）
    エビデンス／証跡: テストに使ったデータやプログラムを動かした結果の画面（ハードコピー）やプログラムを動かした時の記録（ログ）など何かの証拠になるもの
    データパッチ: プログラムの一部分を更新してバグ修正や機能変更を行うためのデータのこと
    Access: webページや記憶装置などに置かれた情報へ到達すること、情報を取り出すこと
    マクロ: 複数の操作をまとめて必要に応じて呼び出せるようにする機能 業務の自動化や他製品との連携やwebからのデータ取得やメールの作成・送信など
        VBA: Visual Basic for Applications Microsoft Office に含まれるアプリケーションソフトの拡張機能で、利用者が簡易なプログラムを記述して実行することで複雑な処理の自動化などを行うことができるもの。また、そのために用意されたプログラミング言語
    GAS（Google Apps Script）: Googleが提供するサーバーサイド・スクリプト環境 googleスプレッドシートを利用した自動化プログラムなどが作成することができる
    API: Application Programming Interface ソフトウェアにAPIという外部とのやり取りを可能とする窓口を作り、外部アプリとコミュニケーションや連携ができる状態にするもの
        WEB API: APIをHTTP/HTTPSベースで実現するAPI
        REST API: Representational State Transfer API RESTの原則に沿った形で設計されたAPI
            REST: Webサービスの設計モデル。RESTなWebサービスは、そのサービスのURIにHTTPメソッドでアクセスすることでデータの送受信を行う
            RESTful:    アドレス指定可能なURIで公開されていること
                        インターフェース(HTTPメソッドの利用)の統一がされていること(CRUD操作)
                        ステートレスであること(サーバーがクライアントのセッション情報を保持しないこと)
                        処理結果がHTTPステータスコードで通知されること(200や404など)

        SOAP: XMLを利用したWebサービス連携プロトコル
    Ajax: Asynchronous Javascript + XML ウェブブラウザ内で非同期通信を行いながらインターフェイスの構築を行うプログラミング手法
        XML: 拡張可能なマークアップ言語 データの管理ややりとりを簡易にするために、広く用いられているマークアップ言語
        JSON: javaScript Object Notation テキストベースのデータフォーマット
        ステータスコード: HTTPにおいてWebサーバからのレスポンスの意味をひょうげbnbする3桁の数字からなるコード
        クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）: 別のアドレスのサイトへHTTPリクエストできるようにするタネのルール
    バリデーション: 対象が仕様や文法などに照らして適切に記述・構築されているか否かを検証するという意味
    データ連携: 異なるアプリケーションやシステムをまたいでデータを共有・活用するために、それぞれの言葉や解釈の垣根を取り払うプロセス
        Daemon: UNIX系のOSでメインメモリに常駐し、サーバーのプログラムやシステムの要求に応じて自動的にサービスを提供するバックグラウンドシステム
        CRON: Daemonの一種で、利用者の設定したスケジュールにしたがって指定されたプログラムを定期的に起動してくれるもの
        バッチ: Batch 一定量のデータを集め、一括処理するための処理手法 複数のコマンドを一つのファイルにまとめて記述し、一括で実行できるファイルをバッチファイルとよぶ
        ログ: コンピュータの利用状況やデータ通信などの履歴や情報の記録をとる事
        CSV: Comma Separated Values 値や項目をカンマ(,)で区切って書いたテキストファイル・データのことをいう
        TSV: Tab Separeted Values 文字や文字列の間にタブ記号を挿入して区切りを設けること、あるいは、そのようにして各データを区切って管理するファイル形式のこと
    プルリクエスト（マージリクエスト）: 開発しゃのローカルリポジトリでの変更を他の開発者に通知し、レビューを受けて本番環境に変更を反映させること。

■ チケット管理ツール
    asana: プロジェクトやタスクの進歩状況などを共有するためのツール
    Backlog: gitなども操作することのできるプロジェクト管理ツール
    Jooto: ドラッグ&ドロップにより直感的に利用することのできるプロジェクト管理ツール
    Readmine: 作業をチケットという単位で作成することで誰が何をやっているのか、どんな状況なのかなどについてわかりやすく使うことのできるプロジェクト管理ツール gitなどにも対応している また、オープンソースプログラム
    Trello: ボード・リスト・カードを使用することでプロジェクトを楽しく柔軟に効率よく整理して優先順位をつけることのできるプロジェクト管理ツール

■ バージョン管理
    集中型: Subversion(SVN)，Concurrent Version System(CVS) 利用するリポジトリが一つのみ メンバーはソースコードをリポジトリより取得して編集し、リポジトリに反映する
    分散型: Git, Mercurial, Bazaar, Fossil リポジトリを複数持つことができる。ローカルリポジトリで編集を行いリモートリポジトリに反映する
    Github: ソフトウェア開発のプラットフォームであり、ソースコードをホスティングする。バージョン管理にはgitを用いる。
    Backlog: Sebversion・Gitのリポジトリ機能を持ったプロジェクト管理ツール
    SourceTree: GitクライアントソフトGUIで操作を行うバージョン管理ツール
    Tortoise SVN: Sebversionのクライアントで、Windowsのシェルエクステンションとして機能する。専用GUIを備えており、CUIのSubversionより直感的で簡単な操作を行うことができる。
    Git Flow: A successful Git branching model
        master: 製品として出荷可能な状態であり、アプリケーションが安定して動く状態にする必要がある
        release: リリースブランチは develop ブランチから作成される。ここから修正用のブランチをきり、修正が終わったらマージする。デバックが終わるまでdevelopにmergeすることは許されない。
        develop: 次のリリースのための最新の開発作業の変更が反映されている状態。このブランチが常に最新。
            feature: 機能の追跡、製品リリースの準備、製品に起きた問題をすばやく修正すること、などを容易にするためのブランチ。

■ FW／ライブラリ
    FW: Frame Work アプリケーションを開発する時、その土台として機能させるソフトウェアのこと。「アプリケーションフレームワーク」とも呼ばれる
        Spring Framework: Javaプラットフォーム向けのオープンソースアプリケーションフレームワーク
        Struts Java Servlet API を拡張してMVCアーキテクチャを採用した、オープンソースフレームワーク
        JSF（Java Server Faces）: ユーザーに文字入力や回答を選択するボックスなどのユーザーインターフェースを作ることに特化している javaのWebアプリケーションを作るためのフレームワーク
    ライブラリ
        Bootstrap: HTML/CSS/Javascriptから構成される最も有名なWEBフレームワーク  htmlに特定のクラスを当てはめることによしcssデザインを構築する
        Flyway: JVM上で動作するオープンソースのデータベースマイグレーションツール。
        Jackson: JSONを処理するライブラリ JSONからJavaオブジェクト、JavaオブジェクトからJSONに変換する
        jQuery: javascript をより簡単な記法で実現できるように設計されたJavascriptのライブラリ
        Junit: Javaで開発されたプログラムにおいてユニットテスト（単体テスト）の自動化を行うためのフレームワーク
        Log4j: Jakartaプロジェクトで開発が勧められているJavaプログラム用のログAPI これにより様々なロギングが可能となる。
        Lombok: Java言語におけるボイラープレートコードをソースコードから排除するために使用するライブラリ
            ボイラープレートコード: 言語仕様上除くことのできない定型的なコードのこと
        ORM: Object-relationa mapping オブジェクト関係マッピング データベースとオブジェクト指向プログラミング言語の間の非互換なデータを変換するプログラミング技法
            例: Ruby on Rails の Active Record

■ 連絡ツール
    ChatWork: メール、電話、会議・訪問など仕事で必要なコミュニケーションをより効率的にするビジネスチャット
    Slack: チャンネルを用いることでチーム全員が進歩状況や目的を共有することを可能とするツール 会話事に専用のチャンネルを作成することができるため情報を整理することができる
    IP Messenger: プロトコルにTCP/IPを利用するメッセンジャーソフト。IPアドレスを直接指定することで、インターネット上のユーザとメッセージの送受信を行うことも可能

■ Java
    Javadoc: Javaソース・ファイルから、APIドキュメントのHTMLページを作成する ルールに従ってソースコードにコメントを埋め込むことでコメントを抽出してドキュメントを作成する
    アノテーション: あるデータに対して関連する情報 (メタデータ)を注釈として付与すること。XML等の記述形式を用いてメタデータをタグづけする場合が多い。
    メモリ管理: コンピュータ上のメモリを管理するもの。単純化すれば、プログラムの要求に応じてメモリの一部を割り当てる方法や、不要になったメモリを再利用のために解放する方法を提供する
        ヒープ: 動的に確保と解放を繰り返せるメモリ領域のこと ソフトウェアは必要に応じて任意にヒープ領域を確保・解放できる。
        GC: Garbage Collection ガベージコレクション コンピュータプログラムが動的に確保したメモリ領域のうち、不要になった領域を自動的に解放する機能。
    GoF: Gang of Four ギャング・オブ・フォー と呼ばれる４人組が提唱した、オブジェクト指向においてよく使える設計パターンのこと 大きく3つに分類することができ、「オブジェクト生成に関するパターン」「プログラムの構造に関するパターン」「オブジェクトの振る舞いに関するパターン」と呼ばれている
    デザインパターン: オブジェクト指向で再利用生の高い設計とするためのパターン

■ その他
    オブジェクト指向: 互いに密接に関連するデータと手続き（処理手順）をオブジェクトと呼ばれるひとまとまりとして定義し、様々なオブジェクトを組み合わせて関連性や相互作用を記述していくことによりシステム全体を構築していく手法
    バッチ処理: コンピュータで一つのプログラム群を順次に実行すること
    コンパイル: 人が理解することができる言語で書かれたプログラムを機械が理解できる言語に変換すること
    カバレッジ: 所定の網羅条件がテストによってどれだけ実行されたかを割合で表したもの
    プラットホーム: ある機器やソフトウェアを動作させるのに必要な、基盤となる装置やソフトウェア、サービス、あるいはそれらを組み合わせた動作環境のこと